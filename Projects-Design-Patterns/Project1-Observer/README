Project 1 - Observer Design Pattern

Problem Description
A youtube channel can have several subscribers, and each time a channel uploads a video, each subscriber should receive a notification. 
The youtube channel can make a new upload post, register an observer (subscriber), remove an observer and also notify all the observers.
A user can subscribe or unsubscribe to a channel, and have the possibility to receive an update (notification).

For this example of a real life problem I chose to implement the Observer Design Pattern. 
Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object theyâ€™re observing.

The structure of the project is:
1. The Subject (Publisher) interface issues events of interest to other objects. These events occur when the subject changes its state or executes some behaviors. 
Subject contains a subscription infrastructure that adds or remove observers from the list. 

2. The YoutubeChannel class implements the Subject interface. It has a method for adding a new post and overrides the methods from the Subject interface.

3. When a new event happens, the notifyObserver method in the YoutubeChannel class goes over the observers list and calls the update method declared in the observer 
interface on each observer object.

4. The Observer interface declares the update method. 

5. The User class implements the Observer interface and provides the subscribe, unsubscribe and update methods.
