Project 2 - Facade Design Pattern

Problem description
A self driving car has a lot of functionalities and processes happening in the background in order to drive itself.
The only methods a client could be interested in is starting the car, driving to a location and parking the car. These methods provide a simplified client interface, as the 
client who buys or uses the car is not interested in the processes that happen in the background.

For this problem I have used the Facade Design Pattern. 
Facade is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes.
A facade is a class that provides a simple interface to a complex subsystem which contains lots of moving parts. 
A facade might provide limited functionality in comparison to working with the subsystem directly. However, it includes only those features that clients really care about.

The car components are kept in separate classes and methods, which are all integrated in the facade (SelfDrivingCarFacade), which is meant to be presented and used by the user. 
It provides a simple interface, without needing to know the processes and classes behind. The methods are easy to access and use.
